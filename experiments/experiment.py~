#!/usr/bin/python
# coding=utf-8

import sys
from simso.core import Model
from simso.configuration import Configuration
import simso.generator.task_generator as task_generator


def main(argv):
    schedulers = [
#        "simso.schedulers.RM",
#        "simso.schedulers.EDF",
        "simso.schedulers.RM_mono"]

    # Manual configuration:
    configuration = Configuration()
    configuration.duration = 1000 * configuration.cycles_per_ms

    # Generate tasks:
    n = 10
    nsets = 10
    u = 3.99

    min_p = 10
    max_p = 100

    u = task_generator.StaffordRandFixedSum(n, u, nsets)
    periods = task_generator.gen_periods_uniform(n, nsets, min_p, max_p,
                                                 round_to_int=True)
    # Add processors.
    for i in range(1, 5):
        configuration.add_processor(name="CPU "+str(i), identifier=i)

    for i, exp_set in enumerate(task_generator.gen_tasksets(u, periods)):
        print("==================================")
        for scheduler_name in schedulers:
            configuration.scheduler_info.clas = scheduler_name
            print("{}:".format(scheduler_name))
            while configuration.task_info_list:
                del configuration.task_info_list[0]
            id_ = 1
            for (c, p) in exp_set:
                configuration.add_task(name="T{}".format(id_), identifier=id_,
                                       period=p, activation_date=0, wcet=c,
                                       deadline=p, abort_on_miss=True)
                id_ += 1

            # Vérification de la config.
            configuration.check_all()
            
            # save one taskset
            configuration.save("./tasksets/exp_{}.xml".format(i))

            # Initialisation de la simu à partir de la config.
#            model = Model(configuration)
            # Exécution de la simu.
#            try:
#                model.run_model()
#                print("Aborted jobs:", sum(
#                    model.results.tasks[task].exceeded_count
#                    for task in model.task_list))
#                assert sum(model.results.tasks[task].exceeded_count
#                           for task in model.task_list) == 0, "aborted jobs"
#            except AssertionError as e:
#                print(e)
#                configuration.save("exp_{}.xml".format(i))


if __name__ == "__main__":
    main(sys.argv[1:])
